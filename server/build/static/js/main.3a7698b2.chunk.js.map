{"version":3,"sources":["pages/Landing Page/reducers/auth.js","pages/dashboard/reducers/expense.js","pages/dashboard/reducers/filters.js","store/configureStore.js","actions/auth.js","pages/dashboard/actions/expenses.js","pages/Landing Page/components/landingPage.js","pages/dashboard/components/ExpenseListItem.js","pages/dashboard/selectors/expenses.js","pages/dashboard/components/ExpenseList.js","pages/dashboard/actions/filters.js","pages/dashboard/components/ExpenseListFilters.js","pages/dashboard/components/Header.js","pages/dashboard/components/ExpenseDashboardPage.js","pages/dashboard/components/ExpenseForm.js","pages/dashboard/components/AddExpensePage.js","pages/dashboard/components/HelpPage.js","pages/dashboard/components/NotFoundPage.js","pages/dashboard/components/EditPage.js","routers/AppRouter.js","index.js"],"names":["authReducerDefaultState","authenticated","authReducer","state","action","type","auth","email","token","expensesReducerDefaultState","expensesReducer","expense","filter","element","id","map","updates","filtersReucerDefaultState","text","sortBy","startDate","moment","startOf","endDate","endOf","filterReducer","persistConfig","key","storage","persistedReducer","persistCombineReducers","filters","expenses","expenseReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","changeAuth","addExpense","description","note","amount","createdAt","GOOGLE_BUTTON_ID","LandingPage","props","onSignIn","googleUser","profile","getBasicProfile","url","encodeURIComponent","getEmail","getName","req","Request","method","fetch","then","response","error","a","json","jsonValue","dispatch","h","Headers","headers","data","i","length","parseInt","catch","console","log","history","push","gapi","signin2","render","this","className","React","Component","connect","getDate","unixTimestamp","dateObject","Date","toLocaleString","month","day","year","ExpenseListItem","to","determineDate","date","Number","isNaN","_i","_isAMomentObject","getVisibleExpenses","createdAtMoment","momentStartDate","momentEndDate","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","toLowerCase","includes","sort","b","selectedExpenses","setStartDate","undefined","setEndDate","ExpenseListFilters","calendarFocused","onDatesChange","onFocusChange","setState","placeholder","value","onChange","e","setTextFilter","target","sortByDate","sortByAmount","focusedInput","showClearDates","numberOfMonths","isOutsideRange","Header","logout","onClick","ExpenseListDashboard","renderSubtitle","totalAmount","createExpense","ExpenseForm","onDescriptionChange","onNoteChange","onAmountChange","match","onDateChange","focused","onSubmit","preventDefault","callAPI","onEditExpense","redirectToDashboard","errorState","parseFloat","valueOf","setTimeout","getInfoOfIndividualExpenseFromAPI","expenseID","parseResponse","editExpense","unix","removeExpense","bind","autoFocus","withRouter","AddExpensePage","uuidv4","HelpPage","NotFoundPage","EditPage","substring","expenseId","AppRouter","path","component","exact","ExpenseDashboard","configureStore","persistor","persistStore","jsx","loading","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a7698b2.chunk.js","sourcesContent":["//authentication reducer, stores information deals with authentication such as bool value of auth, email, and jwt token\r\n\r\nconst authReducerDefaultState = {\r\n    authenticated: false\r\n}\r\n\r\nexport const authReducer = (state = authReducerDefaultState, action)=>{\r\n    switch(action.type){\r\n        case \"SET_AUTH\":\r\n            return{\r\n                ...state,\r\n                authenticated: action.auth,\r\n                email: action.email,\r\n                token: action.token\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer","//EXPENSE REDUCER\r\n\r\n//default state is an empty array, is filled up with each object which is a javascript objec\r\nconst expensesReducerDefaultState = []\r\n\r\nconst expensesReducer = (state = expensesReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_EXPENSE\":\r\n            return [\r\n                ...state, action.expense\r\n            ]\r\n        case \"REMOVE_EXPENSE\":\r\n            return(state.filter(element=>element.id!==action.expense.id))\r\n        case \"EDIT_EXPENSE\":\r\n            return(state.map((expense)=>{\r\n                if(expense.id === action.id){\r\n                    return {\r\n                        ...expense,\r\n                        ...action.updates,\r\n\r\n                    }\r\n                }\r\n                else{\r\n                    return expense;\r\n                }\r\n            }))\r\n        case \"RESET_STORE\":\r\n            return(expensesReducerDefaultState)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default expensesReducer","//FILTER REDUCER\r\nimport moment from 'moment'\r\n\r\n//default state, no fulters\r\nconst filtersReucerDefaultState = {\r\n    text: \"\",\r\n    sortBy: \"date\",\r\n    startDate: moment().startOf('month'),\r\n    endDate: moment().endOf('month')\r\n}\r\n\r\nconst filterReducer = (state = filtersReucerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_TEXT_FILTER\":\r\n            return{\r\n                ...state,\r\n                text:action.text\r\n            }\r\n        case \"SORT_BY_AMOUNT\":\r\n            return{\r\n                ...state,\r\n                sortBy: action.sortBy\r\n            }\r\n        case \"SORT_BY_DATE\":\r\n            return{\r\n                ...state,\r\n                sortBy: action.sortBy\r\n            }\r\n        case \"SET_START_DATE\":\r\n            return{\r\n                ...state,\r\n                startDate: moment(action.startDate)\r\n            }\r\n        case \"SET_END_DATE\":\r\n            return{\r\n                ...state,\r\n                endDate: moment(action.endDate)\r\n            }\r\n        case \"RESET_STORE\":\r\n            return(filtersReucerDefaultState)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filterReducer","import { createStore } from 'redux'\r\n\r\nimport authReducer from '../pages/Landing Page/reducers/auth'\r\nimport expenseReducer from '../pages/dashboard/reducers/expense'\r\nimport filterReducer from '../pages/dashboard/reducers/filters'\r\n\r\nimport {  persistCombineReducers } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n\r\n//requirement to user redux-persist, redux store is preserved on page refresh\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n\r\n}\r\n\r\n//persisted reducer, uses redux-persist to persist the following reducers on page close and refresh\r\nconst persistedReducer = persistCombineReducers(persistConfig, {\r\n    filters: filterReducer,\r\n    expenses: expenseReducer,\r\n    auth: authReducer,\r\n\r\n})\r\n\r\n//REDUX STORE\r\nconst store = () => {\r\n\r\n    const store = createStore(\r\n        persistedReducer,\r\n        // requirement to user redux dev tools\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    )\r\n\r\n    return store\r\n}\r\n\r\n\r\n\r\n\r\nexport default (store)\r\n\r\n\r\n\r\n","//Actions for the Authentication reducer\r\n\r\n//changes auth from true to false depending on situation, is also involved in sending the appropriate email and jwt token when asked for it\r\nexport const changeAuth = (auth = false, email, token)=>{\r\n    return{\r\n        type: \"SET_AUTH\",\r\n        auth,\r\n        email,\r\n        token\r\n      \r\n    }\r\n}","//Actions for the Expense Reducer\r\n\r\n//ADD_EXPENSE\r\nexport const addExpense = ({ description = '', note = '', amount = 0, createdAt = 0, id = 0} = {}) => {\r\n    return {\r\n        type: \"ADD_EXPENSE\",\r\n        expense: {\r\n            id,\r\n            description,\r\n            note,\r\n            amount,\r\n            createdAt\r\n        }\r\n    }\r\n}\r\n\r\n//REMOVE_EXPENSE\r\nexport const removeExpense = (id) => {\r\n  \r\n    return {\r\n        type: \"REMOVE_EXPENSE\",\r\n        expense: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\n//EDIT_EXPENSE\r\nexport const editExpense = (id, updates) =>{\r\n    return{\r\n        type: \"EDIT_EXPENSE\",\r\n        id,\r\n        updates\r\n    }\r\n}\r\n\r\n//RESET_STORE, used to clear dashboard before expenses are added to avoid repeats\r\nexport const resetExpenseReducer=()=>{\r\n    return{\r\n        type: \"RESET_STORE\"\r\n    }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { changeAuth } from \"../../../actions/auth\"\r\nimport { addExpense } from '../../dashboard/actions/expenses';\r\n\r\n\r\nconst GOOGLE_BUTTON_ID = \"google-sign-in-button\";\r\n\r\n//Landing page of the application, renders the login and register form\r\nclass LandingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        //if already authenticated, directly redirect to the dashboard\r\n        if (props.auth) {\r\n            props.history.push(\"/#/dashboard\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //method called when sign in is complete\r\n    onSignIn = (googleUser) => {\r\n\r\n        var profile = googleUser.getBasicProfile();\r\n\r\n\r\n        let url = \"/loginUser?email=\" + encodeURIComponent(profile.getEmail()) + \"&name=\" + encodeURIComponent(profile.getName())\r\n        let req = new Request(url, {\r\n            method: \"POST\"\r\n        })\r\n\r\n        fetch(req).then(async (response, error) => {\r\n            if (error) {\r\n\r\n            }\r\n            const jsonValue = await response.json()\r\n\r\n            const token = jsonValue.token\r\n\r\n            this.props.dispatch(changeAuth(true, profile.getEmail(), token))\r\n\r\n            const url = \"/getExpenses?email=\" + encodeURIComponent(profile.getEmail())\r\n            let h = new Headers({\r\n                \"Authorization\": \"Bearer \" + token\r\n            })\r\n\r\n            let req = new Request(url, {\r\n                headers: h,\r\n                method: \"GET\"\r\n            })\r\n\r\n            //API call to fill in the redux store initially\r\n            fetch(req).then((response, error) => {\r\n                response.json().then((data, error) => {\r\n\r\n                    //filling the expenses in the reducer one by one\r\n                    for (let i = 0; i < data.length; i++) {\r\n\r\n                        this.props.dispatch(addExpense({ description: data[i].description, note: data[i].note, amount: parseInt(data[i].amount), createdAt: parseInt(data[i].createdAt), id: data[i].id }))\r\n\r\n                    }\r\n\r\n                }).catch((error) => {\r\n                    console.log(error)\r\n                })\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n            this.props.history.push(\"/#/dashboard\")\r\n        })\r\n    }\r\n\r\n    //instructions to render google button\r\n    componentDidMount() {\r\n\r\n        window.gapi.signin2.render(GOOGLE_BUTTON_ID, {\r\n            'scope': 'https://www.googleapis.com/auth/plus.login',\r\n            'width': 200,\r\n            'height': 50,\r\n            'longtitle': true,\r\n            'theme': 'dark',\r\n            'onsuccess': this.onSignIn\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"landingPageContainer\">\r\n                <div className=\"landingPageContainer__box\">\r\n                    <h1 className=\"landingPageContainer__title\">Expense Tracker</h1>\r\n                    <p>By Dhairya Khara</p>\r\n                    {/* rendering google button */}\r\n                    <div id={GOOGLE_BUTTON_ID} />\r\n                </div>\r\n\r\n            </div>)\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        auth: state.auth.authenticated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LandingPage)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\n//get human date to render for each individaul expense\r\nconst getDate = (unixTimestamp) => {\r\n\r\n    const dateObject = new Date(unixTimestamp)\r\n\r\n\r\n    const month = dateObject.toLocaleString(\"en-US\", { month: \"long\" })\r\n    const day = dateObject.toLocaleString(\"en-US\", { day: \"numeric\" })\r\n    const year = dateObject.toLocaleString(\"en-US\", { year: \"numeric\" })\r\n\r\n    return month + \" \" + day + \", \" + year\r\n}\r\n\r\n//Each individual expense is rendered using this component\r\nclass ExpenseListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: props.props.id\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* the text of each expense is a link which redirects user to edit that expense */}\r\n                <Link className = \"list-item\" to={`/dashboard/edit/id=${this.state.id}`}>\r\n                    <div>\r\n                        <h3 className = \"list-item__title\">{this.props.props.description}</h3>\r\n                        <span className = \"list-item__sub-title\">{getDate(this.props.props.createdAt)}</span>\r\n                    </div>\r\n                    <h3 className = \"list-item__data\">${(this.props.props.amount) / 1000}</h3>\r\n                </Link>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        expenses: state.expenses,\r\n        filters: state.filters\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ExpenseListItem)\r\n\r\n\r\n\r\n\r\n","// //this method applies filters and expense. Retuns filters expenses\r\n\r\nimport moment from 'moment'\r\n\r\nconst getVisibleExpenses = (expenses, {text, sortBy, startDate, endDate})=>{\r\n    return expenses.filter((expense)=>{\r\n        const createdAtMoment = moment(expense.createdAt)\r\n\r\n\r\n        const momentStartDate = determineDate(startDate)\r\n        const momentEndDate = determineDate(endDate)\r\n\r\n        const startDateMatch = momentStartDate ? momentStartDate.isSameOrBefore(createdAtMoment, 'day'):true\r\n        const endDateMatch = momentEndDate ? momentEndDate.isSameOrAfter(createdAtMoment, 'day'):true\r\n\r\n\r\n        const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\r\n        return startDateMatch && endDateMatch && textMatch;\r\n    }).sort((a,b)=>{\r\n        if(sortBy === \"date\"){\r\n            return a.createdAt < b.createdAt ? 1:-1\r\n        }\r\n        else if(sortBy === \"amount\"){\r\n            return a.amount < b.amount ? 1:-1\r\n        }\r\n        else{\r\n            return undefined\r\n        }\r\n    })\r\n}\r\n\r\nconst determineDate = (date) => {\r\n    if (date === null) {\r\n        return null\r\n    }\r\n    if(Number.isNaN(date._i)){\r\n        return null\r\n    }\r\n    if (date._isAMomentObject) {\r\n        return date\r\n    }\r\n\r\n    return moment(date)\r\n}\r\n\r\nexport default getVisibleExpenses","import React from 'react'\r\nimport ExpenseListItem from './ExpenseListItem'\r\nimport { connect } from 'react-redux'\r\nimport selectedExpenses from '../selectors/expenses'\r\n\r\n//list of expenses user has\r\nconst ExpenseList = (props) => {\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"list-header\">\r\n                <div className=\"show-for-mobile\">Expenses</div>\r\n                <div className=\"show-for-desktop\">Expense</div>\r\n                <div className=\"show-for-desktop\">Amount</div>\r\n            </div>\r\n            <div className = \"list-body\">\r\n\r\n                {/* each expenses added in the list of an ExpenseListItem component */}\r\n                {\r\n                    props.expenses.length === 0 ? (\r\n                        <div className=\"list-item list-item-message\">\r\n\r\n                            <span>No expenses</span>\r\n                        </div>) : (\r\n                        props.expenses.map((expense) => {\r\n                            return <ExpenseListItem key={expense.id} props={expense} />\r\n                        })\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        //only store selectedExpenses that satisfy the filters\r\n        expenses: selectedExpenses(state.expenses, state.filters)\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ExpenseList);\r\n\r\n","//Actions for the filter reducer\r\n\r\n\r\nexport const setTextFilter = (text = '')=>{\r\n    return{\r\n        type: \"SET_TEXT_FILTER\",\r\n        text\r\n    }\r\n}\r\n\r\nexport const sortByAmount = (sortBy = \"amount\")=>{\r\n    return{\r\n        type: \"SORT_BY_AMOUNT\",\r\n        sortBy\r\n    }\r\n}\r\n\r\nexport const sortByDate = (sortBy = \"date\")=>{\r\n    return{\r\n        type: \"SORT_BY_DATE\",\r\n        sortBy\r\n    }\r\n}\r\n\r\nexport const setStartDate = (startDate = undefined) =>{\r\n    return{\r\n        type: \"SET_START_DATE\",\r\n        startDate\r\n    }\r\n}\r\n\r\nexport const setEndDate = (endDate = undefined)=>{\r\n    return{\r\n        type: \"SET_END_DATE\",\r\n        endDate\r\n    }\r\n}\r\n\r\n////RESET_STORE, used to clear dashboard before expenses are added to avoid repeats\r\nexport const resetFilterReducer = ()=>{\r\n    return{\r\n        type: \"RESET_STORE\"\r\n    }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { DateRangePicker } from 'react-dates'\r\nimport { setTextFilter, sortByDate, sortByAmount, setStartDate, setEndDate } from '../actions/filters'\r\nimport moment from 'moment'\r\n\r\n//component handling all the filters that can be applied to expenses\r\nclass ExpenseListFilters extends React.Component {\r\n    state = {\r\n        calendarFocused: null\r\n    }\r\n    //method that handles the calendar widget\r\n    onDatesChange = ({ startDate, endDate }) => {\r\n\r\n        this.props.dispatch(setStartDate(startDate))\r\n        this.props.dispatch(setEndDate(endDate))\r\n    }\r\n    //method that handles if user is selected on calender widget or not\r\n    onFocusChange = (calendarFocused) => {\r\n        this.setState(() => {\r\n            return {\r\n                calendarFocused\r\n            }\r\n        })\r\n    }\r\n    //method that returns the value to be passed on to the startDate and endDate props of the DateRangePicker Component\r\n    determineDate = (date) => {\r\n        if (date === null) {\r\n            return null\r\n        }\r\n        if (Number.isNaN(date._i)) {\r\n            return null\r\n        }\r\n        if (date._isAMomentObject) {\r\n            return date\r\n        }\r\n\r\n        return moment(date)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-container\">\r\n                {/* input dealing with text filter */}\r\n                <div className=\"input-group\">\r\n                    <div className=\"input-group__item\">\r\n                        <input placeholder=\"Search expenses\" className=\"text-input\" type=\"text\" value={this.props.filters.text} onChange={(e) => {\r\n                            this.props.dispatch(setTextFilter(e.target.value))\r\n\r\n                        }}>\r\n\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"input-group__item\">\r\n                        {/* input dealing with date filter */}\r\n                        <select className=\"select\" onChange={(e) => {\r\n                            if (e.target.value === \"date\") {\r\n                                this.props.dispatch(sortByDate())\r\n                            }\r\n                            else if (e.target.value === \"amount\") {\r\n                                this.props.dispatch(sortByAmount())\r\n                            }\r\n                        }}>\r\n                            {/* user may choose to filter between DATE or AMOUNT */}\r\n                            <option value=\"date\">Date</option>\r\n                            <option value=\"amount\">Amount</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"input-group__item\">\r\n\r\n                        <DateRangePicker\r\n\r\n                            startDate={this.determineDate(this.props.filters.startDate)}\r\n                            endDate={this.determineDate(this.props.filters.endDate)}\r\n                            onDatesChange={this.onDatesChange}\r\n                            focusedInput={this.state.calendarFocused}\r\n                            onFocusChange={this.onFocusChange}\r\n                            showClearDates={true}\r\n                            numberOfMonths={1}\r\n                            isOutsideRange={() => false}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        filters: state.filters\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(ExpenseListFilters)","import React from 'react'\r\nimport {  Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { changeAuth } from '../../../actions/auth'\r\nimport { resetFilterReducer } from '../actions/filters'\r\nimport { resetExpenseReducer } from '../actions/expenses'\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n    \r\n\r\n    //method called when logout button is clicked\r\n    logout = (e) => {\r\n\r\n\r\n        const url = \"/logout?email=\" + encodeURIComponent(this.props.email) + \"&token=\" + encodeURIComponent(this.props.token)\r\n        let h = new Headers({\r\n            \"Authorization\":  \"Bearer \" +this.props.token\r\n        })\r\n\r\n        let req = new Request(url, {\r\n            method: \"POST\",\r\n            headers: h\r\n        })\r\n\r\n        fetch(req).then(() => {\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n\r\n        })\r\n\r\n        //changing auth to false, and resetting expense and filter reducers\r\n        this.props.dispatch(changeAuth(false, undefined, undefined))\r\n        this.props.dispatch(resetExpenseReducer())\r\n        this.props.dispatch(resetFilterReducer())\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"header\">\r\n                    <div className=\"content-container\" >\r\n                        <div className=\"header__content\">\r\n                            <Link to=\"/dashboard\" className=\"header__title\">\r\n                                <h1>Expense Tracker</h1>\r\n                            </Link>\r\n                            <Link to=\"/\">\r\n                                <button className=\"logoutButton\" onClick={this.logout}>Logout</button>\r\n\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        auth: state.auth.authenticated,\r\n        email: state.auth.email,\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Header);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport ExpenseList from './ExpenseList'\r\nimport ExpenseListFilters from './ExpenseListFilters'\r\nimport selectedExpenses from '../selectors/expenses'\r\nimport Header from './Header'\r\n\r\n\r\n\r\nclass ExpenseListDashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        //if user is not authenticated, redirected to landing page\r\n        if (props.auth === false) {\r\n            props.history.push(\"/\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //method that returns the value for the the line 'Viewing {# of Expenses} expenses tottaling {totalExpenses}'\r\n    renderSubtitle = () => {\r\n        if (this.props.expenses[0] && (this.props.expenses).length <= 0) {\r\n\r\n            return (\r\n                <div>\r\n                    Viewing <span>0</span> expenses totalling <span>$0.00</span>\r\n                </div>\r\n            )\r\n        }\r\n        else if ((this.props.expenses).length === 1) {\r\n\r\n            return (\r\n                <div>\r\n                    Viewing <span>1</span> expense totalling <span>${this.props.expenses[0].amount / 1000}</span>\r\n                </div>\r\n            )\r\n        }\r\n        let totalAmount = 0\r\n        for (let i = 0; i <= this.props.expenses.length; i++) {\r\n            if (this.props.expenses[i]) {\r\n                totalAmount += (this.props.expenses[i].amount) / 1000\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                Viewing <span>{this.props.expenses.length}</span> expenses totalling <span>${totalAmount}</span>\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n\r\n                <div className=\"page-header\">\r\n                    <div className=\"content-container\">\r\n                        <h1 className=\"page-header__title\">{this.renderSubtitle()}</h1>\r\n\r\n                        <div className=\"page-header__actions\">\r\n                            <Link to=\"/dashboard/create\">\r\n                                <button className=\"button\" onClick={this.createExpense}>Add Expense</button>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <ExpenseListFilters />\r\n                <ExpenseList />\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.auth.authenticated,\r\n        email: state.auth.email,\r\n        token: state.auth.token,\r\n        expenses: selectedExpenses(state.expenses, state.filters)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ExpenseListDashboard);\r\n\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport { SingleDatePicker } from 'react-dates'\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport {editExpense, removeExpense} from '../actions/expenses'\r\n\r\n\r\n\r\n\r\nclass ExpenseForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.redirectToDashboard = this.redirectToDashboard.bind(this);\r\n\r\n        //react state to store info of all the textboxes\r\n        this.state = {\r\n            description: \"\",\r\n            note: \"\",\r\n            amount: \"\",\r\n            createdAt: moment(),\r\n            calendarFocused: false,\r\n            errorState: \"\"\r\n        }\r\n\r\n        //this method is called if user wants to edit the expenses and textboxes need to be filled with the info from the indicidual expense\r\n        if (props.callAPI) {\r\n            this.getInfoOfIndividualExpenseFromAPI()\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //method handling the state change of description\r\n    onDescriptionChange = (e) => {\r\n        const description = e.target.value;\r\n        this.setState(() => {\r\n            return {\r\n                description\r\n            }\r\n        })\r\n    }\r\n\r\n    //method handling the state change of note box\r\n    onNoteChange = (e) => {\r\n        const note = e.target.value;\r\n        this.setState(() => {\r\n            return {\r\n                note\r\n            }\r\n        })\r\n    }\r\n\r\n    //method handling the state change of amount text box\r\n    onAmountChange = (e) => {\r\n        const amount = e.target.value;\r\n        if (!amount || amount.match(/^\\d{1,}(\\.\\d{0,2})?$/)) {\r\n            this.setState(() => {\r\n                return { amount }\r\n            })\r\n        }\r\n    }\r\n\r\n    //method handling the state change of date picker\r\n    onDateChange = (createdAt) => {\r\n        this.setState(() => {\r\n            if (createdAt) {\r\n                return {\r\n                    createdAt\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    //method handling the state change of calendar widget\r\n    onFocusChange = ({ focused }) => {\r\n        this.setState(() => {\r\n            return {\r\n                calendarFocused: focused\r\n            }\r\n        })\r\n    }\r\n\r\n    //method handling the submission of the expense form\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //the following code should be executed if user is creating a new expense\r\n        if (!this.props.callAPI) {\r\n            if (!this.state.description || !this.state.amount) {\r\n                this.setState(() => {\r\n                    return {\r\n                        errorState: \"Please provide a description and amount\"\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                this.setState(() => {\r\n                    return {\r\n                        errorState: \"\"\r\n                    }\r\n                })\r\n                this.props.onSubmit({\r\n                    description: this.state.description,\r\n                    amount: parseFloat(this.state.amount, 10) * 1000,\r\n                    createdAt: this.state.createdAt.valueOf(),\r\n                    note: this.state.note\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        //the following code should be executed if user is editting existing expense\r\n        else if (this.props.callAPI) {\r\n            this.onEditExpense()\r\n            this.redirectToDashboard(this.props)\r\n        }\r\n\r\n    }\r\n\r\n    //redirect to dashboard after form submission\r\n    redirectToDashboard = (props) => {\r\n        ///time out is set because database needs to be updated BEFORE going to dashboard. Else, outdated dashboard is rendered even if database is updated\r\n        setTimeout(() => {\r\n            props.history.push(\"/#/dashboard\")\r\n        }, 50)\r\n    }\r\n\r\n    //call this method when editting expense\r\n    getInfoOfIndividualExpenseFromAPI = () => {\r\n\r\n        //expense id stores the id of the individual expense that needs to be editted\r\n        const expenseID = this.props.expenseID\r\n        const email = this.props.email\r\n\r\n        let url = \"/singleExpense?email=\" + encodeURIComponent(email) + \"&id=\" + encodeURIComponent(expenseID)\r\n\r\n        let h = new Headers({\r\n            \"Authorization\": this.props.token\r\n        })\r\n        let req = new Request(url, {\r\n            method: \"GET\",\r\n            headers: h\r\n        })\r\n        fetch(req).then(async (response, error) => {\r\n            if (error) {\r\n                console.log(error)\r\n                return\r\n            }\r\n            const parseResponse = await response.json()\r\n\r\n            //after getting information from database, store it in react state\r\n            this.setState(() => {\r\n                return {\r\n                    description: parseResponse.description,\r\n                    amount: parseResponse.amount / 1000,\r\n                    createdAt: moment(parseResponse.createdAt),\r\n                    note: parseResponse.note\r\n\r\n                }\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    //method called on submission of the edit expense form from onSubmit()\r\n    //api call to edit expense in database\r\n    onEditExpense = () => {\r\n\r\n        const expenseID = this.props.expenseID\r\n        const email = this.props.email\r\n  \r\n        const updatedDescription = this.state.description\r\n        const updatedAmount = this.state.amount*1000\r\n        const updatedNote = this.state.note\r\n        const updatedCreatedAt = this.state.createdAt\r\n\r\n        const updates = {\r\n            description: updatedDescription,\r\n            amount: updatedAmount,\r\n            note: updatedNote,\r\n            createdAt: updatedCreatedAt\r\n        }\r\n        \r\n        //editting redux store Expense Reducer\r\n        this.props.dispatch(editExpense(expenseID, updates))        \r\n\r\n        let url = \"/updateExpense?email=\" + encodeURIComponent(email) + \"&id=\" + encodeURIComponent(expenseID) + \"&description=\" +\r\n            encodeURIComponent(this.state.description) + \"&amount=\" + encodeURIComponent(this.state.amount) + \"&createdAt=\" + encodeURIComponent(moment(this.state.createdAt).unix() * 1000) + \"&note=\"\r\n            + encodeURIComponent(this.state.note)\r\n\r\n        let h = new Headers({\r\n            \"Authorization\": this.props.token\r\n        })\r\n        let req = new Request(url, {\r\n            method: \"PATCH\",\r\n            headers: h\r\n        })\r\n\r\n        //editting expense in the database\r\n        fetch(req).then(async (response, error) => {\r\n            if (error) {\r\n                console.log(\"error\")\r\n                return\r\n            }\r\n            return\r\n        })\r\n    }\r\n\r\n    //method called when remove expense button is clicked\r\n    //api call to remove the individual expense from the database\r\n    removeExpense = () => {\r\n\r\n        const expenseID = this.props.expenseID\r\n        const email = this.props.email\r\n\r\n        //deleting expense from the redux store Expense Reducer\r\n        this.props.dispatch(removeExpense(expenseID))\r\n\r\n        let url = \"/deleteExpense?email=\" + encodeURIComponent(email) + \"&id=\" + encodeURIComponent(expenseID)\r\n\r\n\r\n        let h = new Headers({\r\n            \"Authorization\": this.props.token\r\n        })\r\n        let req = new Request(url, {\r\n            method: \"POST\",\r\n            headers: h\r\n        })\r\n\r\n        //deleting expense from the database\r\n        fetch(req).then(async (response, error) => {\r\n            if (error) {\r\n                console.log(\"error\")\r\n\r\n            }\r\n\r\n        })\r\n\r\n        //redirect to dashboard after expense is deleted\r\n        this.redirectToDashboard(this.props)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {/* The main form of this page. Information will already be filled if editting expense */}\r\n                <form className=\"form\" onSubmit={this.onSubmit}>\r\n                    {this.state.errorState ? <p className=\"form__error\">{this.state.errorState}</p> : <p></p>}\r\n                    <input className=\"text-input\" value={this.state.description} placeholder=\"Description\" type=\"text\" autoFocus onChange={this.onDescriptionChange}></input>\r\n                    <input className=\"text-input\" value={this.state.amount} placeholder=\"Amount\" type=\"text\" onChange={this.onAmountChange}></input>\r\n                    <br></br>\r\n                    <SingleDatePicker\r\n\r\n                        date={this.state.createdAt}\r\n                        onDateChange={this.onDateChange}\r\n                        focused={this.state.calendarFocused}\r\n                        onFocusChange={this.onFocusChange}\r\n                        numberOfMonths={1}\r\n                        isOutsideRange={() => {\r\n                            return false;\r\n                        }}\r\n                    />\r\n                    <br></br>\r\n                    <textarea className=\"text-area\" value={this.state.note} placeholder=\"Add a note for your expense (optional)\" onChange={this.onNoteChange}></textarea>\r\n\r\n                    <div>\r\n                        <button className = \"button\">{this.props.callAPI ? \"Edit Expense\" : \"Add Expense\"}</button>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                </form>\r\n                {/* Only render the RemoveExpense button if the form is rendered while for editting purposes */}\r\n                {this.props.callAPI ? <button className = \"button button--secondary\" onClick={this.removeExpense}>Remove Expense</button> : false}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(ExpenseForm))","import React from 'react'\r\nimport ExpenseForm from './ExpenseForm'\r\nimport { connect } from 'react-redux'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport Header from './Header'\r\nimport { addExpense } from '../actions/expenses'\r\n\r\n\r\nclass AddExpensePage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        //if not authenticated, redirect to landing page\r\n        if (props.auth === false) {\r\n            props.history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    //method that calls the api to add expense to database\r\n    callAPI = ({ description, createdAt, amount, note }) => {\r\n        const id = uuidv4()\r\n        this.props.dispatch(addExpense({description, createdAt, amount, note, id}))\r\n        let url = \"/createExpense?description=\"\r\n            + encodeURIComponent(description) + \"&createdAt=\" + encodeURIComponent(createdAt) + \"&amount=\"\r\n            + encodeURIComponent(amount) + \"&note=\" + encodeURIComponent(note) + \"&email=\" + encodeURIComponent(this.props.email) + \"&id=\"\r\n            + encodeURIComponent(id)\r\n\r\n        //jwt token is sent using the header, is verified on the back end\r\n        let h = new Headers({\r\n            \"Authorization\": this.props.token\r\n        })\r\n\r\n        let req = new Request(url, {\r\n            method: \"POST\",\r\n            headers: h\r\n        })\r\n        fetch(req).then(async (response, error) => {\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Header />\r\n                <div className=\"page-header\">\r\n                    <div className=\"content-container\">\r\n                        <h1 className=\"page-header__title\">Add Expense</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-container\">\r\n                    <ExpenseForm onSubmit={(expense) => {\r\n\r\n\r\n                        this.callAPI(expense)\r\n                        //time out is set because database needs to be updated BEFORE going to dashboard. Else, outdated dashboard is rendered even if database is updated\r\n                        setTimeout(() => {\r\n                            this.props.history.push('/#/dashboard')\r\n                        }, 10)\r\n\r\n                    }} />\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        email: state.auth.email,\r\n        token: state.auth.token,\r\n        auth: state.auth.authenticated,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddExpensePage)","import React from 'react'\r\n\r\nconst HelpPage = () => {\r\n    return (\r\n        <div>\r\n            <p>Help Page</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelpPage","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <div>\r\n            404 - <Link to=\"/\">Go Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFoundPage","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ExpenseForm from './ExpenseForm'\r\nimport Header from './Header'\r\n\r\nclass EditPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            description: \"\",\r\n            amount: 0,\r\n            createdAt: 0,\r\n            note: \"\",\r\n        }\r\n\r\n        if (props.auth === false) {\r\n            props.history.push(\"/\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //call to API to edit the specific expense\r\n    callAPI() {\r\n\r\n        //id of expense to edit\r\n        const expenseID = this.props.match.url.substring(19, this.props.match.url.length);\r\n\r\n        let url = \"/singleExpense?email=\" + encodeURIComponent(this.props.email) + \"&id=\" + encodeURIComponent(expenseID)\r\n\r\n        let h = new Headers({\r\n            \"Authorization\": this.props.token\r\n        })\r\n        let req = new Request(url, {\r\n            method: \"GET\",\r\n            headers: h\r\n        })\r\n        fetch(req).then(async (response, error) => {\r\n            if (error) {\r\n                console.log(error)\r\n                return\r\n            }\r\n\r\n            const parseResponse = await response.json()\r\n\r\n            //setting the state with info acquried from the api call\r\n            this.setState(() => {\r\n                return ({\r\n                    description: parseResponse.description,\r\n                    amount: parseResponse.amount,\r\n                    createdAt: parseResponse.createdAt,\r\n                    note: parseResponse.note\r\n                })\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div className=\"page-header\">\r\n                    <div className=\"content-container\">\r\n                        <h1 className=\"page-header__title\">Edit Expense</h1>\r\n                    </div>\r\n                </div>\r\n                {/* Expense form with info from the api call is rendered */}\r\n                <div className=\"content-container\">\r\n                    <ExpenseForm callAPI={true} expenseID={this.props.match.url.substring(19, this.props.match.url.length)} email={this.props.email} />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        email: state.auth.email,\r\n        token: state.auth.token,\r\n        auth: state.auth.authenticated,\r\n        expenseId: state.expenses.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EditPage)","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport LandingPage from '../pages/Landing Page/components/landingPage'\r\nimport ExpenseDashboard from '../pages/dashboard/components/ExpenseDashboardPage'\r\nimport AddExpensePage from '../pages/dashboard/components/AddExpensePage'\r\nimport HelpPage from '../pages/dashboard/components/HelpPage'\r\nimport NotFoundPage from '../pages/dashboard/components/NotFoundPage'\r\nimport EditPage from '../pages/dashboard/components/EditPage'\r\n\r\n//Main router for the application\r\nclass AppRouter extends React.Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <div>\r\n                    \r\n                    <Switch>\r\n                        <Route path=\"/\" component={LandingPage} exact={true} />\r\n                        <Route path = \"/#/dashboard\" component = {ExpenseDashboard} exact = {true}/>\r\n                        <Route path = \"/#/dashboard/create\" component = {AddExpensePage}/>\r\n                        <Route path = \"/#/dashboard/help\" component = {HelpPage}/>\r\n                        <Route path=\"/#/dashboard/edit/:id\" component={EditPage} />\r\n                        <Route component = {NotFoundPage}/>\r\n                    </Switch>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppRouter","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { persistStore } from 'redux-persist'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport configureStore from './store/configureStore'\r\nimport AppRouter from './routers/AppRouter'\r\n\r\nimport 'normalize.css/normalize.css';\r\nimport './styles/styles.scss'\r\n\r\nconst store = configureStore()\r\nconst persistor = persistStore(store)\r\n\r\nconst jsx = (\r\n    <div>\r\n        <Provider store={store}>\r\n        {/* Persist Gate - requirement to user redux-persist, redux store is preserved on page refresh */}\r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <AppRouter />\r\n            </PersistGate>\r\n        </Provider>\r\n    </div>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('app'))"],"sourceRoot":""}